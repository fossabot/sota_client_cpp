/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/org/genivi/swm/SotaClientStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace org {
namespace genivi {
namespace swm {

SotaClientStubDefault::SotaClientStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(SotaClient::getInterfaceVersion()) {
}

const CommonAPI::Version& SotaClientStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

SotaClientStubRemoteEvent* SotaClientStubDefault::initStubAdapter(const std::shared_ptr<SotaClientStubAdapter> &_adapter) {
    CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: Sent by SC to start the download of an update previously announced
	as
 *   available through an update_available() call made from SC to
	SWLM.
 */
void SotaClientStubDefault::initiateDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, initiateDownloadReply_t _reply) {
    (void)_client;
    (void) _updateId;
    _reply();
}

/**
 * description: Abort a download previously initiated with initiate_download().
	Invoked by
 *   SWLM in response to an error or an explicit
	request sent by HMI to SWLM in
 *   response to a user abort.
 */
void SotaClientStubDefault::abortDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, abortDownloadReply_t _reply) {
    (void)_client;
    (void) _updateId;
    _reply();
}

/**
 * description: Receive an update report from SWLM with the processing result of all
	bundled
 *   operations.
	An update report message can either be sent in response
	to an
 *   downloadComplete() message transmitted from SC to SWLM,
	or be sent
 *   unsolicited by SWLM to SC
 */
void SotaClientStubDefault::updateReport(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, std::vector<SotaClient::OperationResult> _operationsResults, updateReportReply_t _reply) {
    (void)_client;
    (void) _updateId;
    (void) _operationsResults;
    _reply();
}


void SotaClientStubDefault::fireInstalledSoftwareNeededEvent() {
    assert((CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireInstalledSoftwareNeededEvent();
}
void SotaClientStubDefault::fireUpdateAvailableEvent(const ::v1::org::genivi::swm::SotaClient::UpdateAvailable &_updateAvailable) {
    assert((CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireUpdateAvailableEvent(_updateAvailable);
}
void SotaClientStubDefault::fireDownloadCompleteEvent(const ::v1::org::genivi::swm::SotaClient::DownloadComplete &_downloadComplete) {
    assert((CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_.lock()) !=NULL);
    auto stubAdapter = CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::stubAdapter_.lock();
   	if (stubAdapter)
        stubAdapter->fireDownloadCompleteEvent(_downloadComplete);
}


SotaClientStubDefault::RemoteEventHandler::RemoteEventHandler(SotaClientStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace swm
} // namespace genivi
} // namespace org
} // namespace v1
