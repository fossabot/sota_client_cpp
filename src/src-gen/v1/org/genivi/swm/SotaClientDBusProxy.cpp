/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#include <v1/org/genivi/swm/SotaClientDBusProxy.hpp>

namespace v1 {
namespace org {
namespace genivi {
namespace swm {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createSotaClientDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection) {
	return std::make_shared<SotaClientDBusProxy>(_address, _connection);
}

INITIALIZER(registerSotaClientDBusProxy) {
     CommonAPI::DBus::Factory::get()->registerProxyCreateMethod(
		SotaClient::getInterface(),
		&createSotaClientDBusProxy);
}

SotaClientDBusProxy::SotaClientDBusProxy(
	const CommonAPI::DBus::DBusAddress &_address,
	const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection)
	:	CommonAPI::DBus::DBusProxy(_address, _connection)
,		installedSoftwareNeeded_(*this, "InstalledSoftwareNeeded", "", std::make_tuple()),
		updateAvailable_(*this, "UpdateAvailable", "(sssbt)", std::make_tuple(static_cast<SotaClient_::UpdateAvailableDeployment_t*>(nullptr))),
		downloadComplete_(*this, "DownloadComplete", "(sss)", std::make_tuple(static_cast<SotaClient_::DownloadCompleteDeployment_t*>(nullptr)))
{
}


SotaClientDBusProxy::InstalledSoftwareNeededEvent& SotaClientDBusProxy::getInstalledSoftwareNeededEvent() {
    return installedSoftwareNeeded_;
}
SotaClientDBusProxy::UpdateAvailableEvent& SotaClientDBusProxy::getUpdateAvailableEvent() {
    return updateAvailable_;
}
SotaClientDBusProxy::DownloadCompleteEvent& SotaClientDBusProxy::getDownloadCompleteEvent() {
    return downloadComplete_;
}
    
    /**
     * description: Sent by SC to start the download of an update previously announced
    	as
     *   available through an update_available() call made from SC to
    	SWLM.
     */
    void SotaClientDBusProxy::initiateDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_updateId(_updateId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "initiateDownload",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_updateId,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SotaClientDBusProxy::initiateDownloadAsync(const std::string &_updateId, InitiateDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_updateId(_updateId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "initiateDownload",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_updateId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Abort a download previously initiated with initiate_download().
    	Invoked by
     *   SWLM in response to an error or an explicit
    	request sent by HMI to SWLM in
     *   response to a user abort.
     */
    void SotaClientDBusProxy::abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_updateId(_updateId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "abortDownload",
        "s",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_updateId,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SotaClientDBusProxy::abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_updateId(_updateId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "abortDownload",
        "s",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_updateId,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }
    /**
     * description: Receive an update report from SWLM with the processing result of all
    	bundled
     *   operations.
    	An update report message can either be sent in response
    	to an
     *   downloadComplete() message transmitted from SC to SWLM,
    	or be sent
     *   unsolicited by SWLM to SC
     */
    void SotaClientDBusProxy::updateReport(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_updateId(_updateId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<SotaClient::OperationResult>, CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t>> deploy_operationsResults(_operationsResults, static_cast<CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t>*>(nullptr));
        CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::vector<SotaClient::OperationResult>, CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodWithReply(
        *this,
        "updateReport",
        "sa(sis)",
(_info ? _info : &CommonAPI::DBus::defaultCallInfo),
deploy_updateId, deploy_operationsResults,
_internalCallStatus);
}
    std::future<CommonAPI::CallStatus> SotaClientDBusProxy::updateReportAsync(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, UpdateReportAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment> deploy_updateId(_updateId, static_cast<CommonAPI::DBus::StringDeployment*>(nullptr));
        CommonAPI::Deployable<std::vector<SotaClient::OperationResult>, CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t>> deploy_operationsResults(_operationsResults, static_cast<CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t>*>(nullptr));
        return CommonAPI::DBus::DBusProxyHelper<
            CommonAPI::DBus::DBusSerializableArguments<
            CommonAPI::Deployable<std::string, CommonAPI::DBus::StringDeployment >,
            CommonAPI::Deployable<std::vector<SotaClient::OperationResult>, CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t> >
            >,
            CommonAPI::DBus::DBusSerializableArguments<
            >
        	>::callMethodAsync(
        *this,
        "updateReport",
        "sa(sis)",
        (_info ? _info : &CommonAPI::DBus::defaultCallInfo),
        deploy_updateId, deploy_operationsResults,
        [_callback] (CommonAPI::CallStatus _internalCallStatus) {
        	if (_callback)
        		_callback(_internalCallStatus);
        },
        std::make_tuple());
    }


void SotaClientDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
          ownVersionMajor = 1;
          ownVersionMinor = 0;
      }

      } // namespace swm
      } // namespace genivi
      } // namespace org
      } // namespace v1
