/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#ifndef V1_ORG_GENIVI_SWM_Sota_Client_STUB_DEFAULT_HPP_
#define V1_ORG_GENIVI_SWM_Sota_Client_STUB_DEFAULT_HPP_


#include <v1/org/genivi/swm/SotaClientStub.hpp>
#include <sstream>

namespace v1 {
namespace org {
namespace genivi {
namespace swm {

/**
 * Provides a default implementation for SotaClientStubRemoteEvent and
 * SotaClientStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class SotaClientStubDefault
    : public virtual SotaClientStub {
public:
    SotaClientStubDefault();

    SotaClientStubRemoteEvent* initStubAdapter(const std::shared_ptr<SotaClientStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: Sent by SC to start the download of an update previously announced
    	as
     *   available through an update_available() call made from SC to
    	SWLM.
     */
    virtual void initiateDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, initiateDownloadReply_t _reply);
    /**
     * description: Abort a download previously initiated with initiate_download().
    	Invoked by
     *   SWLM in response to an error or an explicit
    	request sent by HMI to SWLM in
     *   response to a user abort.
     */
    virtual void abortDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, abortDownloadReply_t _reply);
    /**
     * description: Receive an update report from SWLM with the processing result of all
    	bundled
     *   operations.
    	An update report message can either be sent in response
    	to an
     *   downloadComplete() message transmitted from SC to SWLM,
    	or be sent
     *   unsolicited by SWLM to SC
     */
    virtual void updateReport(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, std::vector<SotaClient::OperationResult> _operationsResults, updateReportReply_t _reply);

virtual void fireInstalledSoftwareNeededEvent();
virtual void fireUpdateAvailableEvent(const ::v1::org::genivi::swm::SotaClient::UpdateAvailable &_updateAvailable);
virtual void fireDownloadCompleteEvent(const ::v1::org::genivi::swm::SotaClient::DownloadComplete &_downloadComplete);


protected:
    class RemoteEventHandler: public virtual SotaClientStubRemoteEvent {
    public:
        RemoteEventHandler(SotaClientStubDefault *_defaultStub);


    private:
        SotaClientStubDefault *defaultStub_;
    };
private:
    SotaClientStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace swm
} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_SWM_Sota_Client_STUB_DEFAULT
