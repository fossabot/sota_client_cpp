/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Loading Manager interfaace
 */
#ifndef V1_ORG_GENIVI_Software_Loading_Manager_DBUS_PROXY_HPP_
#define V1_ORG_GENIVI_Software_Loading_Manager_DBUS_PROXY_HPP_

#include <v1/org/genivi/SoftwareLoadingManagerProxyBase.hpp>
#include "v1/org/genivi/SoftwareLoadingManagerDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace genivi {

class SoftwareLoadingManagerDBusProxy
    : virtual public SoftwareLoadingManagerProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    SoftwareLoadingManagerDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~SoftwareLoadingManagerDBusProxy() { }



    /**
     * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
        package is
     *   available for download.
    	This is a fire and forget message. If the update is
     *   to be downloaded,
    	org.genivi.swm.sc.initiate_download() will be called.
     */
    virtual void updateAvailable(const std::string &_updateId, const std::string &_description, const std::string &_signature, const bool &_requestConfirmation, const uint64_t &_size, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateAvailableAsync(const std::string &_updateId, const std::string &_description, const std::string &_signature, const bool &_requestConfirmation, const uint64_t &_size, const std::string &_name, UpdateAvailableAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Message, sent by SC to SWLM, to indicate
    	that a download previously initiated
     *   by a
     */
    virtual void downloadComplete(const std::string &_updateImage, const std::string &_signature, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> downloadCompleteAsync(const std::string &_updateImage, const std::string &_signature, DownloadCompleteAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Message, sent by HMI to SWLM to specify
    	if a user confirmed or declined an
     *   update notified to HMI through a
    	org.genivi.swm.hmi.updateNotificataion()
     *   call.
     */
    virtual void updateConfirmation(const uint32_t &_updateId, const bool &_approved, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateConfirmationAsync(const uint32_t &_updateId, const bool &_approved, UpdateConfirmationAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Abort a download in progress.
    	Invoked by HMI in response to SWLM in response
     *   to a user abort.
    	Will be forwarded by SWLM to SC in order to complete the
     *   abort.
     */
    virtual void abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Message, sent by other components to SWLM to report the result
    	of an update
     *   operation initiated by a previous
    	call to one of the following
     *   methods:
    	org.genivi.swm.packmgr.installPackage()
    	org.genivi.swm.packmgr.upgra
     *  dePackage()
    	org.genivi.swm.packmgr.removePackage()
    	org.genivi.swm.partmgr.crea
     *  teDiskPartition()
    	org.genivi.swm.packmgr.deleteDiskPartition()
    	org.genivi.swm.
     *  packmgr.resizeDiskPartition()
    	org.genivi.swm.packmgr.writeDiskPartition()
    	org.
     *  genivi.swm.packmgr.patchDiskPartition()
    	org.genivi.swm.ml.flashModuleFirmware()
     */
    virtual void operationResult(const uint32_t &_transactionId, const SoftwareLoadingManager::SWMResult &_resultCode, const std::string &_resultText, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> operationResultAsync(const uint32_t &_transactionId, const SoftwareLoadingManager::SWMResult &_resultCode, const std::string &_resultText, OperationResultAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Message, sent by CEDM or SC to SWLM to retrieve a
    	list of installed software
     *   packages and/or module
    	firmware versions.
     */
    virtual void getInstalledSoftware(const bool &_includePackages, const bool &_includeModuleFirmware, CommonAPI::CallStatus &_internalCallStatus, std::vector<SoftwareLoadingManager::InstalledPackage> &_installedPackages, std::vector<SoftwareLoadingManager::InstalledFirmware> &_installedFirmware, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> getInstalledSoftwareAsync(const bool &_includePackages, const bool &_includeModuleFirmware, GetInstalledSoftwareAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   


};

} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_Software_Loading_Manager_DBUS_PROXY_HPP_

