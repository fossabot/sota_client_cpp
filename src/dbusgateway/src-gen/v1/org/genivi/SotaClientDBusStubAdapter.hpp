/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#ifndef V1_ORG_GENIVI_Sota_Client_DBUS_STUB_ADAPTER_HPP_
#define V1_ORG_GENIVI_Sota_Client_DBUS_STUB_ADAPTER_HPP_

#include <v1/org/genivi/SotaClientStub.hpp>
#include "v1/org/genivi/SotaClientDBusDeployment.hpp"        
#include <v1/org/genivi/SotaClientDBusDeployment.hpp>        

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusDeployment.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {

typedef CommonAPI::DBus::DBusStubAdapterHelper<SotaClientStub> SotaClientDBusStubAdapterHelper;

class SotaClientDBusStubAdapterInternal
    : public virtual SotaClientStubAdapter,
      public SotaClientDBusStubAdapterHelper
{
public:
    SotaClientDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~SotaClientDBusStubAdapterInternal();

    virtual bool hasFreedesktopProperties();

    inline static const char* getInterface() {
        return SotaClient::getInterface();
    }


    void fireUpdateAvailableEvent(const ::v1::org::genivi::SotaClient::UpdateAvailable& updateAvailable);
    void fireDownloadCompleteEvent(const ::v1::org::genivi::SotaClient::DownloadComplete& downloadComplete);
    void fireInstalledSoftwareNeededEvent();


    const SotaClientDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::org::genivi::SotaClientStub,
        CommonAPI::Version
        > getSotaClientInterfaceVersionStubDispatcher;



/**
 * description: Sent by SC to start the download of an update previously announced
	as
 *   available through an update_available() call  made from SC to
	SWLM.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SotaClientStub,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > initiateDownloadStubDispatcher;
/**
 * description: Abort a download previously initiated with initiate_download().
	Invoked by
 *   SWLM in response to an error or an explicit
	request sent by HMI to SWLM in
 *   response to a user abort.
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SotaClientStub,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > abortDownloadStubDispatcher;
/**
 * description: Receive an update report from SWLM with the processing result of all
	bundled
 *   operations.
	An update report message can either be sent in response
	to an
 *   downloadComplete() message transmitted from SC to SWLM,
	or be sent
 *   unsolicited by SWLM to SC
 */

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SotaClientStub,
    std::tuple<std::string, std::vector<SotaClient::OperationResult>>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::ArrayDeployment<SotaClient_::OperationResultDeployment_t>>,
    std::tuple<>
    
    > updateReportStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    SotaClientDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class SotaClientDBusStubAdapter
    : public SotaClientDBusStubAdapterInternal,
      public std::enable_shared_from_this<SotaClientDBusStubAdapter> {
public:
    SotaClientDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          SotaClientDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_Sota_Client_DBUS_STUB_ADAPTER_HPP_
