/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/org/genivi/SoftwareLoadingManager.hpp>
#include <v1/org/genivi/SoftwareLoadingManagerDBusStubAdapter.hpp>

namespace v1 {
namespace org {
namespace genivi {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createSoftwareLoadingManagerDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<SoftwareLoadingManagerDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerSoftwareLoadingManagerDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	SoftwareLoadingManager::getInterface(), &createSoftwareLoadingManagerDBusStubAdapter);
}

SoftwareLoadingManagerDBusStubAdapterInternal::~SoftwareLoadingManagerDBusStubAdapterInternal() {
    deactivateManagedInstances();
    SoftwareLoadingManagerDBusStubAdapterHelper::deinit();
}

void SoftwareLoadingManagerDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* SoftwareLoadingManagerDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        /**
         * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
            package is
         *   available for download.
        	This is a fire and forget message. If the update is
         *   to be downloaded,
        	org.genivi.swm.sc.initiate_download() will be called.
         */
        "<method name=\"updateAvailable\">\n"
            "<arg name=\"_updateId\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_description\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_signature\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_requestConfirmation\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_size\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"_name\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Message, sent by SC to SWLM, to indicate
        	that a download previously initiated
         *   by a
         */
        "<method name=\"downloadComplete\">\n"
            "<arg name=\"_updateImage\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_signature\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Message, sent by HMI to SWLM to specify
        	if a user confirmed or declined an
         *   update notified to HMI through a
        	org.genivi.swm.hmi.updateNotificataion()
         *   call.
         */
        "<method name=\"updateConfirmation\">\n"
            "<arg name=\"_updateId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_approved\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Abort a download in progress.
        	Invoked by HMI in response to SWLM in response
         *   to a user abort.
        	Will be forwarded by SWLM to SC in order to complete the
         *   abort.
         */
        "<method name=\"abortDownload\">\n"
            "<arg name=\"_updateId\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Message, sent by other components to SWLM to report the result
        	of an update
         *   operation initiated by a previous
        	call to one of the following
         *   methods:
        	org.genivi.swm.packmgr.installPackage()
        	org.genivi.swm.packmgr.upgra
         *  dePackage()
        	org.genivi.swm.packmgr.removePackage()
        	org.genivi.swm.partmgr.crea
         *  teDiskPartition()
        	org.genivi.swm.packmgr.deleteDiskPartition()
        	org.genivi.swm.
         *  packmgr.resizeDiskPartition()
        	org.genivi.swm.packmgr.writeDiskPartition()
        	org.
         *  genivi.swm.packmgr.patchDiskPartition()
        	org.genivi.swm.ml.flashModuleFirmware()
         */
        "<method name=\"operationResult\">\n"
            "<arg name=\"_transactionId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"_resultCode\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"_resultText\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        /**
         * description: Message, sent by CEDM or SC to SWLM to retrieve a
        	list of installed software
         *   packages and/or module
        	firmware versions.
         */
        "<method name=\"getInstalledSoftware\">\n"
            "<arg name=\"_includePackages\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_includeModuleFirmware\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"_installedPackages\" type=\"a(ssst)\" direction=\"out\" />\n"
            "<arg name=\"_installedFirmware\" type=\"a(sst)\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1::org::genivi::SoftwareLoadingManagerStub,
        CommonAPI::Version
        > SoftwareLoadingManagerDBusStubAdapterInternal::getSoftwareLoadingManagerInterfaceVersionStubDispatcher(&SoftwareLoadingManagerStub::getInterfaceVersion, "uu");




/**
 * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
    package is
 *   available for download.
	This is a fire and forget message. If the update is
 *   to be downloaded,
	org.genivi.swm.sc.initiate_download() will be called.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SoftwareLoadingManagerStub,
    std::tuple<std::string, std::string, std::string, bool, uint64_t, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment, CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > SoftwareLoadingManagerDBusStubAdapterInternal::updateAvailableStubDispatcher(
    &SoftwareLoadingManagerStub::updateAvailable, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Message, sent by SC to SWLM, to indicate
	that a download previously initiated
 *   by a
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SoftwareLoadingManagerStub,
    std::tuple<std::string, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > SoftwareLoadingManagerDBusStubAdapterInternal::downloadCompleteStubDispatcher(
    &SoftwareLoadingManagerStub::downloadComplete, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Message, sent by HMI to SWLM to specify
	if a user confirmed or declined an
 *   update notified to HMI through a
	org.genivi.swm.hmi.updateNotificataion()
 *   call.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SoftwareLoadingManagerStub,
    std::tuple<uint32_t, bool>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<>
    
    > SoftwareLoadingManagerDBusStubAdapterInternal::updateConfirmationStubDispatcher(
    &SoftwareLoadingManagerStub::updateConfirmation, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Abort a download in progress.
	Invoked by HMI in response to SWLM in response
 *   to a user abort.
	Will be forwarded by SWLM to SC in order to complete the
 *   abort.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SoftwareLoadingManagerStub,
    std::tuple<std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > SoftwareLoadingManagerDBusStubAdapterInternal::abortDownloadStubDispatcher(
    &SoftwareLoadingManagerStub::abortDownload, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Message, sent by other components to SWLM to report the result
	of an update
 *   operation initiated by a previous
	call to one of the following
 *   methods:
	org.genivi.swm.packmgr.installPackage()
	org.genivi.swm.packmgr.upgra
 *  dePackage()
	org.genivi.swm.packmgr.removePackage()
	org.genivi.swm.partmgr.crea
 *  teDiskPartition()
	org.genivi.swm.packmgr.deleteDiskPartition()
	org.genivi.swm.
 *  packmgr.resizeDiskPartition()
	org.genivi.swm.packmgr.writeDiskPartition()
	org.
 *  genivi.swm.packmgr.patchDiskPartition()
	org.genivi.swm.ml.flashModuleFirmware()
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SoftwareLoadingManagerStub,
    std::tuple<uint32_t, SoftwareLoadingManager::SWMResult, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > SoftwareLoadingManagerDBusStubAdapterInternal::operationResultStubDispatcher(
    &SoftwareLoadingManagerStub::operationResult, "",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

/**
 * description: Message, sent by CEDM or SC to SWLM to retrieve a
	list of installed software
 *   packages and/or module
	firmware versions.
 */
CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1::org::genivi::SoftwareLoadingManagerStub,
    std::tuple<bool, bool>,
    std::tuple<std::vector<SoftwareLoadingManager::InstalledPackage>, std::vector<SoftwareLoadingManager::InstalledFirmware>>,
    std::tuple<CommonAPI::EmptyDeployment, CommonAPI::EmptyDeployment>,
    std::tuple<CommonAPI::DBus::ArrayDeployment<SoftwareLoadingManager_::InstalledPackageDeployment_t>, CommonAPI::DBus::ArrayDeployment<SoftwareLoadingManager_::InstalledFirmwareDeployment_t>>
    
    > SoftwareLoadingManagerDBusStubAdapterInternal::getInstalledSoftwareStubDispatcher(
    &SoftwareLoadingManagerStub::getInstalledSoftware, "a(ssst)a(sst)",
					std::make_tuple(static_cast<CommonAPI::EmptyDeployment*>(nullptr), static_cast<CommonAPI::EmptyDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::ArrayDeployment<SoftwareLoadingManager_::InstalledPackageDeployment_t>*>(nullptr), static_cast<CommonAPI::DBus::ArrayDeployment<SoftwareLoadingManager_::InstalledFirmwareDeployment_t>*>(nullptr)));





const SoftwareLoadingManagerDBusStubAdapterHelper::StubDispatcherTable& SoftwareLoadingManagerDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& SoftwareLoadingManagerDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

SoftwareLoadingManagerDBusStubAdapterInternal::SoftwareLoadingManagerDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      SoftwareLoadingManagerDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<SoftwareLoadingManagerStub>(_stub), false),
      stubDispatcherTable_({
            /**
             * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
                package is
             *   available for download.
            	This is a fire and forget message. If the update is
             *   to be downloaded,
            	org.genivi.swm.sc.initiate_download() will be called.
             */
            { { "updateAvailable", "sssbts" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::updateAvailableStubDispatcher },
            /**
             * description: Message, sent by SC to SWLM, to indicate
            	that a download previously initiated
             *   by a
             */
            { { "downloadComplete", "ss" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::downloadCompleteStubDispatcher },
            /**
             * description: Message, sent by HMI to SWLM to specify
            	if a user confirmed or declined an
             *   update notified to HMI through a
            	org.genivi.swm.hmi.updateNotificataion()
             *   call.
             */
            { { "updateConfirmation", "ub" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::updateConfirmationStubDispatcher },
            /**
             * description: Abort a download in progress.
            	Invoked by HMI in response to SWLM in response
             *   to a user abort.
            	Will be forwarded by SWLM to SC in order to complete the
             *   abort.
             */
            { { "abortDownload", "s" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::abortDownloadStubDispatcher },
            /**
             * description: Message, sent by other components to SWLM to report the result
            	of an update
             *   operation initiated by a previous
            	call to one of the following
             *   methods:
            	org.genivi.swm.packmgr.installPackage()
            	org.genivi.swm.packmgr.upgra
             *  dePackage()
            	org.genivi.swm.packmgr.removePackage()
            	org.genivi.swm.partmgr.crea
             *  teDiskPartition()
            	org.genivi.swm.packmgr.deleteDiskPartition()
            	org.genivi.swm.
             *  packmgr.resizeDiskPartition()
            	org.genivi.swm.packmgr.writeDiskPartition()
            	org.
             *  genivi.swm.packmgr.patchDiskPartition()
            	org.genivi.swm.ml.flashModuleFirmware()
             */
            { { "operationResult", "uis" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::operationResultStubDispatcher },
            /**
             * description: Message, sent by CEDM or SC to SWLM to retrieve a
            	list of installed software
             *   packages and/or module
            	firmware versions.
             */
            { { "getInstalledSoftware", "bb" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::getInstalledSoftwareStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &org::genivi::SoftwareLoadingManagerDBusStubAdapterInternal::getSoftwareLoadingManagerInterfaceVersionStubDispatcher });
}

bool SoftwareLoadingManagerDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace genivi
} // namespace org
} // namespace v1
