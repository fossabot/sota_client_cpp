/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Loading Manager interfaace
 */
#ifndef V1_ORG_GENIVI_Software_Loading_Manager_PROXY_HPP_
#define V1_ORG_GENIVI_Software_Loading_Manager_PROXY_HPP_

#include <v1/org/genivi/SoftwareLoadingManagerProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {

template <typename ... _AttributeExtensions>
class SoftwareLoadingManagerProxy
    : virtual public SoftwareLoadingManager, 
      virtual public SoftwareLoadingManagerProxyBase,
      virtual public _AttributeExtensions... {
public:
    SoftwareLoadingManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SoftwareLoadingManagerProxy();

    typedef SoftwareLoadingManager InterfaceType;




    /**
     * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
        package is
     *   available for download.
    	This is a fire and forget message. If the update is
     *   to be downloaded,
    	org.genivi.swm.sc.initiate_download() will be called.
     * Calls updateAvailable with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateAvailable(const std::string &_updateId, const std::string &_description, const std::string &_signature, const bool &_requestConfirmation, const uint64_t &_size, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateAvailable with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateAvailableAsync(const std::string &_updateId, const std::string &_description, const std::string &_signature, const bool &_requestConfirmation, const uint64_t &_size, const std::string &_name, UpdateAvailableAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Message, sent by SC to SWLM, to indicate
    	that a download previously initiated
     *   by a
     * Calls downloadComplete with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void downloadComplete(const std::string &_updateImage, const std::string &_signature, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls downloadComplete with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> downloadCompleteAsync(const std::string &_updateImage, const std::string &_signature, DownloadCompleteAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Message, sent by HMI to SWLM to specify
    	if a user confirmed or declined an
     *   update notified to HMI through a
    	org.genivi.swm.hmi.updateNotificataion()
     *   call.
     * Calls updateConfirmation with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateConfirmation(const uint32_t &_updateId, const bool &_approved, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateConfirmation with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateConfirmationAsync(const uint32_t &_updateId, const bool &_approved, UpdateConfirmationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Abort a download in progress.
    	Invoked by HMI in response to SWLM in response
     *   to a user abort.
    	Will be forwarded by SWLM to SC in order to complete the
     *   abort.
     * Calls abortDownload with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls abortDownload with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Message, sent by other components to SWLM to report the result
    	of an update
     *   operation initiated by a previous
    	call to one of the following
     *   methods:
    	org.genivi.swm.packmgr.installPackage()
    	org.genivi.swm.packmgr.upgra
     *  dePackage()
    	org.genivi.swm.packmgr.removePackage()
    	org.genivi.swm.partmgr.crea
     *  teDiskPartition()
    	org.genivi.swm.packmgr.deleteDiskPartition()
    	org.genivi.swm.
     *  packmgr.resizeDiskPartition()
    	org.genivi.swm.packmgr.writeDiskPartition()
    	org.
     *  genivi.swm.packmgr.patchDiskPartition()
    	org.genivi.swm.ml.flashModuleFirmware()
     * Calls operationResult with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void operationResult(const uint32_t &_transactionId, const SoftwareLoadingManager::SWMResult &_resultCode, const std::string &_resultText, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls operationResult with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> operationResultAsync(const uint32_t &_transactionId, const SoftwareLoadingManager::SWMResult &_resultCode, const std::string &_resultText, OperationResultAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Message, sent by CEDM or SC to SWLM to retrieve a
    	list of installed software
     *   packages and/or module
    	firmware versions.
     * Calls getInstalledSoftware with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getInstalledSoftware(const bool &_includePackages, const bool &_includeModuleFirmware, CommonAPI::CallStatus &_internalCallStatus, std::vector<SoftwareLoadingManager::InstalledPackage> &_installedPackages, std::vector<SoftwareLoadingManager::InstalledFirmware> &_installedFirmware, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getInstalledSoftware with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getInstalledSoftwareAsync(const bool &_includePackages, const bool &_includeModuleFirmware, GetInstalledSoftwareAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<SoftwareLoadingManagerProxyBase> delegate_;
};

typedef SoftwareLoadingManagerProxy<> SoftwareLoadingManagerProxyDefault;


//
// SoftwareLoadingManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
SoftwareLoadingManagerProxy<_AttributeExtensions...>::SoftwareLoadingManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<SoftwareLoadingManagerProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<SoftwareLoadingManagerProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SoftwareLoadingManagerProxy<_AttributeExtensions...>::~SoftwareLoadingManagerProxy() {
}

/**
 * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
    package is
 *   available for download.
	This is a fire and forget message. If the update is
 *   to be downloaded,
	org.genivi.swm.sc.initiate_download() will be called.
 */
template <typename ... _AttributeExtensions>
void SoftwareLoadingManagerProxy<_AttributeExtensions...>::updateAvailable(const std::string &_updateId, const std::string &_description, const std::string &_signature, const bool &_requestConfirmation, const uint64_t &_size, const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->updateAvailable(_updateId, _description, _signature, _requestConfirmation, _size, _name, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareLoadingManagerProxy<_AttributeExtensions...>::updateAvailableAsync(const std::string &_updateId, const std::string &_description, const std::string &_signature, const bool &_requestConfirmation, const uint64_t &_size, const std::string &_name, UpdateAvailableAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateAvailableAsync(_updateId, _description, _signature, _requestConfirmation, _size, _name, _callback, _info);
}
/**
 * description: Message, sent by SC to SWLM, to indicate
	that a download previously initiated
 *   by a
 */
template <typename ... _AttributeExtensions>
void SoftwareLoadingManagerProxy<_AttributeExtensions...>::downloadComplete(const std::string &_updateImage, const std::string &_signature, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->downloadComplete(_updateImage, _signature, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareLoadingManagerProxy<_AttributeExtensions...>::downloadCompleteAsync(const std::string &_updateImage, const std::string &_signature, DownloadCompleteAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->downloadCompleteAsync(_updateImage, _signature, _callback, _info);
}
/**
 * description: Message, sent by HMI to SWLM to specify
	if a user confirmed or declined an
 *   update notified to HMI through a
	org.genivi.swm.hmi.updateNotificataion()
 *   call.
 */
template <typename ... _AttributeExtensions>
void SoftwareLoadingManagerProxy<_AttributeExtensions...>::updateConfirmation(const uint32_t &_updateId, const bool &_approved, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->updateConfirmation(_updateId, _approved, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareLoadingManagerProxy<_AttributeExtensions...>::updateConfirmationAsync(const uint32_t &_updateId, const bool &_approved, UpdateConfirmationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateConfirmationAsync(_updateId, _approved, _callback, _info);
}
/**
 * description: Abort a download in progress.
	Invoked by HMI in response to SWLM in response
 *   to a user abort.
	Will be forwarded by SWLM to SC in order to complete the
 *   abort.
 */
template <typename ... _AttributeExtensions>
void SoftwareLoadingManagerProxy<_AttributeExtensions...>::abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->abortDownload(_updateId, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareLoadingManagerProxy<_AttributeExtensions...>::abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->abortDownloadAsync(_updateId, _callback, _info);
}
/**
 * description: Message, sent by other components to SWLM to report the result
	of an update
 *   operation initiated by a previous
	call to one of the following
 *   methods:
	org.genivi.swm.packmgr.installPackage()
	org.genivi.swm.packmgr.upgra
 *  dePackage()
	org.genivi.swm.packmgr.removePackage()
	org.genivi.swm.partmgr.crea
 *  teDiskPartition()
	org.genivi.swm.packmgr.deleteDiskPartition()
	org.genivi.swm.
 *  packmgr.resizeDiskPartition()
	org.genivi.swm.packmgr.writeDiskPartition()
	org.
 *  genivi.swm.packmgr.patchDiskPartition()
	org.genivi.swm.ml.flashModuleFirmware()
 */
template <typename ... _AttributeExtensions>
void SoftwareLoadingManagerProxy<_AttributeExtensions...>::operationResult(const uint32_t &_transactionId, const SoftwareLoadingManager::SWMResult &_resultCode, const std::string &_resultText, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    if (!_resultCode.validate()) {
        _internalCallStatus = CommonAPI::CallStatus::INVALID_VALUE;
        return;
    }
    delegate_->operationResult(_transactionId, _resultCode, _resultText, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareLoadingManagerProxy<_AttributeExtensions...>::operationResultAsync(const uint32_t &_transactionId, const SoftwareLoadingManager::SWMResult &_resultCode, const std::string &_resultText, OperationResultAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    if (!_resultCode.validate()) {
        _callback(CommonAPI::CallStatus::INVALID_VALUE);
        std::promise<CommonAPI::CallStatus> promise;
        promise.set_value(CommonAPI::CallStatus::INVALID_VALUE);
        return promise.get_future();
    }
    return delegate_->operationResultAsync(_transactionId, _resultCode, _resultText, _callback, _info);
}
/**
 * description: Message, sent by CEDM or SC to SWLM to retrieve a
	list of installed software
 *   packages and/or module
	firmware versions.
 */
template <typename ... _AttributeExtensions>
void SoftwareLoadingManagerProxy<_AttributeExtensions...>::getInstalledSoftware(const bool &_includePackages, const bool &_includeModuleFirmware, CommonAPI::CallStatus &_internalCallStatus, std::vector<SoftwareLoadingManager::InstalledPackage> &_installedPackages, std::vector<SoftwareLoadingManager::InstalledFirmware> &_installedFirmware, const CommonAPI::CallInfo *_info) {
    delegate_->getInstalledSoftware(_includePackages, _includeModuleFirmware, _internalCallStatus, _installedPackages, _installedFirmware, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SoftwareLoadingManagerProxy<_AttributeExtensions...>::getInstalledSoftwareAsync(const bool &_includePackages, const bool &_includeModuleFirmware, GetInstalledSoftwareAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getInstalledSoftwareAsync(_includePackages, _includeModuleFirmware, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SoftwareLoadingManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SoftwareLoadingManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SoftwareLoadingManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SoftwareLoadingManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SoftwareLoadingManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace genivi
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_Software_Loading_Manager_PROXY_HPP_
