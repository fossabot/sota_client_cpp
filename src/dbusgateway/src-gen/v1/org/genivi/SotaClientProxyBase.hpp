/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#ifndef V1_ORG_GENIVI_Sota_Client_PROXY_BASE_HPP_
#define V1_ORG_GENIVI_Sota_Client_PROXY_BASE_HPP_

#include <v1/org/genivi/SotaClient.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {

class SotaClientProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        ::v1::org::genivi::SotaClient::UpdateAvailable
    > UpdateAvailableEvent;
    typedef CommonAPI::Event<
        ::v1::org::genivi::SotaClient::DownloadComplete
    > DownloadCompleteEvent;
    typedef CommonAPI::Event<
    > InstalledSoftwareNeededEvent;

    typedef std::function<void(const CommonAPI::CallStatus&)> InitiateDownloadAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> AbortDownloadAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> UpdateReportAsyncCallback;


    virtual UpdateAvailableEvent& getUpdateAvailableEvent() = 0;
    virtual DownloadCompleteEvent& getDownloadCompleteEvent() = 0;
    virtual InstalledSoftwareNeededEvent& getInstalledSoftwareNeededEvent() = 0;

    /**
     * description: Sent by SC to start the download of an update previously announced
    	as
     *   available through an update_available() call  made from SC to
    	SWLM.
     */
    virtual void initiateDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> initiateDownloadAsync(const std::string &_updateId, InitiateDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Abort a download previously initiated with initiate_download().
    	Invoked by
     *   SWLM in response to an error or an explicit
    	request sent by HMI to SWLM in
     *   response to a user abort.
     */
    virtual void abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * description: Receive an update report from SWLM with the processing result of all
    	bundled
     *   operations.
    	An update report message can either be sent in response
    	to an
     *   downloadComplete() message transmitted from SC to SWLM,
    	or be sent
     *   unsolicited by SWLM to SC
     */
    virtual void updateReport(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> updateReportAsync(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, UpdateReportAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_Sota_Client_PROXY_BASE_HPP_
