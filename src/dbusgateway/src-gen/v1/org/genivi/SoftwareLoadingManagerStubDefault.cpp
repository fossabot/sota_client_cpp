/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/org/genivi/SoftwareLoadingManagerStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace org {
namespace genivi {

SoftwareLoadingManagerStubDefault::SoftwareLoadingManagerStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(SoftwareLoadingManager::getInterfaceVersion()) {
}

const CommonAPI::Version& SoftwareLoadingManagerStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

SoftwareLoadingManagerStubRemoteEvent* SoftwareLoadingManagerStubDefault::initStubAdapter(const std::shared_ptr<SoftwareLoadingManagerStubAdapter> &_adapter) {
    CommonAPI::Stub<SoftwareLoadingManagerStubAdapter, SoftwareLoadingManagerStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


/**
 * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
    package is
 *   available for download.
	This is a fire and forget message. If the update is
 *   to be downloaded,
	org.genivi.swm.sc.initiate_download() will be called.
 */
void SoftwareLoadingManagerStubDefault::updateAvailable(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, std::string _description, std::string _signature, bool _requestConfirmation, uint64_t _size, std::string _name, updateAvailableReply_t _reply) {
    (void)_client;
    (void) _updateId;
    (void) _description;
    (void) _signature;
    (void) _requestConfirmation;
    (void) _size;
    (void) _name;
    _reply();
}

/**
 * description: Message, sent by SC to SWLM, to indicate
	that a download previously initiated
 *   by a
 */
void SoftwareLoadingManagerStubDefault::downloadComplete(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateImage, std::string _signature, downloadCompleteReply_t _reply) {
    (void)_client;
    (void) _updateImage;
    (void) _signature;
    _reply();
}

/**
 * description: Message, sent by HMI to SWLM to specify
	if a user confirmed or declined an
 *   update notified to HMI through a
	org.genivi.swm.hmi.updateNotificataion()
 *   call.
 */
void SoftwareLoadingManagerStubDefault::updateConfirmation(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _updateId, bool _approved, updateConfirmationReply_t _reply) {
    (void)_client;
    (void) _updateId;
    (void) _approved;
    _reply();
}

/**
 * description: Abort a download in progress.
	Invoked by HMI in response to SWLM in response
 *   to a user abort.
	Will be forwarded by SWLM to SC in order to complete the
 *   abort.
 */
void SoftwareLoadingManagerStubDefault::abortDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, abortDownloadReply_t _reply) {
    (void)_client;
    (void) _updateId;
    _reply();
}

/**
 * description: Message, sent by other components to SWLM to report the result
	of an update
 *   operation initiated by a previous
	call to one of the following
 *   methods:
	org.genivi.swm.packmgr.installPackage()
	org.genivi.swm.packmgr.upgra
 *  dePackage()
	org.genivi.swm.packmgr.removePackage()
	org.genivi.swm.partmgr.crea
 *  teDiskPartition()
	org.genivi.swm.packmgr.deleteDiskPartition()
	org.genivi.swm.
 *  packmgr.resizeDiskPartition()
	org.genivi.swm.packmgr.writeDiskPartition()
	org.
 *  genivi.swm.packmgr.patchDiskPartition()
	org.genivi.swm.ml.flashModuleFirmware()
 */
void SoftwareLoadingManagerStubDefault::operationResult(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _transactionId, SoftwareLoadingManager::SWMResult _resultCode, std::string _resultText, operationResultReply_t _reply) {
    (void)_client;
    (void) _transactionId;
    (void) _resultCode;
    (void) _resultText;
    _reply();
}

/**
 * description: Message, sent by CEDM or SC to SWLM to retrieve a
	list of installed software
 *   packages and/or module
	firmware versions.
 */
void SoftwareLoadingManagerStubDefault::getInstalledSoftware(const std::shared_ptr<CommonAPI::ClientId> _client, bool _includePackages, bool _includeModuleFirmware, getInstalledSoftwareReply_t _reply) {
    (void)_client;
    (void) _includePackages;
    (void) _includeModuleFirmware;
    std::vector<SoftwareLoadingManager::InstalledPackage> installedPackages = {};
    std::vector<SoftwareLoadingManager::InstalledFirmware> installedFirmware = {};
    _reply(installedPackages, installedFirmware);
}




SoftwareLoadingManagerStubDefault::RemoteEventHandler::RemoteEventHandler(SoftwareLoadingManagerStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace genivi
} // namespace org
} // namespace v1
