/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#ifndef V1_ORG_GENIVI_Sota_Client_STUB_HPP_
#define V1_ORG_GENIVI_Sota_Client_STUB_HPP_

#include <functional>




#include <v1/org/genivi/SotaClient.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service SotaClient. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class SotaClientStubAdapter
    : public virtual CommonAPI::StubAdapter, 
      public virtual SotaClient {
 public:

    /**
     * Sends a broadcast event for UpdateAvailable. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireUpdateAvailableEvent(const ::v1::org::genivi::SotaClient::UpdateAvailable &_updateAvailable) = 0;
    /**
     * Sends a broadcast event for DownloadComplete. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireDownloadCompleteEvent(const ::v1::org::genivi::SotaClient::DownloadComplete &_downloadComplete) = 0;
    /**
     * Sends a broadcast event for InstalledSoftwareNeeded. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireInstalledSoftwareNeededEvent() = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for SotaClient.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class SotaClientStubRemoteEvent
{
public:
    virtual ~SotaClientStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service SotaClient to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class SotaClientStub
    : public virtual CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>
{
public:
    typedef std::function<void ()>initiateDownloadReply_t;
    typedef std::function<void ()>abortDownloadReply_t;
    typedef std::function<void ()>updateReportReply_t;

    virtual ~SotaClientStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;


    /**
     * description: Sent by SC to start the download of an update previously announced
    	as
     *   available through an update_available() call  made from SC to
    	SWLM.
     */
    /// This is the method that will be called on remote calls on the method initiateDownload.
    virtual void initiateDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, initiateDownloadReply_t _reply) = 0;
    /**
     * description: Abort a download previously initiated with initiate_download().
    	Invoked by
     *   SWLM in response to an error or an explicit
    	request sent by HMI to SWLM in
     *   response to a user abort.
     */
    /// This is the method that will be called on remote calls on the method abortDownload.
    virtual void abortDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, abortDownloadReply_t _reply) = 0;
    /**
     * description: Receive an update report from SWLM with the processing result of all
    	bundled
     *   operations.
    	An update report message can either be sent in response
    	to an
     *   downloadComplete() message transmitted from SC to SWLM,
    	or be sent
     *   unsolicited by SWLM to SC
     */
    /// This is the method that will be called on remote calls on the method updateReport.
    virtual void updateReport(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, std::vector<SotaClient::OperationResult> _operationsResults, updateReportReply_t _reply) = 0;
    /// Sends a broadcast event for UpdateAvailable.
    virtual void fireUpdateAvailableEvent(const ::v1::org::genivi::SotaClient::UpdateAvailable &_updateAvailable) = 0;
    /// Sends a broadcast event for DownloadComplete.
    virtual void fireDownloadCompleteEvent(const ::v1::org::genivi::SotaClient::DownloadComplete &_downloadComplete) = 0;
    /// Sends a broadcast event for InstalledSoftwareNeeded.
    virtual void fireInstalledSoftwareNeededEvent() = 0;

    using CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<SotaClientStubAdapter, SotaClientStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef SotaClientStubRemoteEvent RemoteEventType;
    typedef SotaClient StubInterface;
};

} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_Sota_Client_STUB_HPP_
