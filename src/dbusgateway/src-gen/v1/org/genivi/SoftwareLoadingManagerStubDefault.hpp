/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Loading Manager interfaace
 */
#ifndef V1_ORG_GENIVI_Software_Loading_Manager_STUB_DEFAULT_HPP_
#define V1_ORG_GENIVI_Software_Loading_Manager_STUB_DEFAULT_HPP_


#include <v1/org/genivi/SoftwareLoadingManagerStub.hpp>
#include <sstream>

namespace v1 {
namespace org {
namespace genivi {

/**
 * Provides a default implementation for SoftwareLoadingManagerStubRemoteEvent and
 * SoftwareLoadingManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class SoftwareLoadingManagerStubDefault
    : public virtual SoftwareLoadingManagerStub {
public:
    SoftwareLoadingManagerStubDefault();

    SoftwareLoadingManagerStubRemoteEvent* initStubAdapter(const std::shared_ptr<SoftwareLoadingManagerStubAdapter> &_adapter);

    const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client);


    /**
     * description: Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
        package is
     *   available for download.
    	This is a fire and forget message. If the update is
     *   to be downloaded,
    	org.genivi.swm.sc.initiate_download() will be called.
     */
    virtual void updateAvailable(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, std::string _description, std::string _signature, bool _requestConfirmation, uint64_t _size, std::string _name, updateAvailableReply_t _reply);
    /**
     * description: Message, sent by SC to SWLM, to indicate
    	that a download previously initiated
     *   by a
     */
    virtual void downloadComplete(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateImage, std::string _signature, downloadCompleteReply_t _reply);
    /**
     * description: Message, sent by HMI to SWLM to specify
    	if a user confirmed or declined an
     *   update notified to HMI through a
    	org.genivi.swm.hmi.updateNotificataion()
     *   call.
     */
    virtual void updateConfirmation(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _updateId, bool _approved, updateConfirmationReply_t _reply);
    /**
     * description: Abort a download in progress.
    	Invoked by HMI in response to SWLM in response
     *   to a user abort.
    	Will be forwarded by SWLM to SC in order to complete the
     *   abort.
     */
    virtual void abortDownload(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _updateId, abortDownloadReply_t _reply);
    /**
     * description: Message, sent by other components to SWLM to report the result
    	of an update
     *   operation initiated by a previous
    	call to one of the following
     *   methods:
    	org.genivi.swm.packmgr.installPackage()
    	org.genivi.swm.packmgr.upgra
     *  dePackage()
    	org.genivi.swm.packmgr.removePackage()
    	org.genivi.swm.partmgr.crea
     *  teDiskPartition()
    	org.genivi.swm.packmgr.deleteDiskPartition()
    	org.genivi.swm.
     *  packmgr.resizeDiskPartition()
    	org.genivi.swm.packmgr.writeDiskPartition()
    	org.
     *  genivi.swm.packmgr.patchDiskPartition()
    	org.genivi.swm.ml.flashModuleFirmware()
     */
    virtual void operationResult(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _transactionId, SoftwareLoadingManager::SWMResult _resultCode, std::string _resultText, operationResultReply_t _reply);
    /**
     * description: Message, sent by CEDM or SC to SWLM to retrieve a
    	list of installed software
     *   packages and/or module
    	firmware versions.
     */
    virtual void getInstalledSoftware(const std::shared_ptr<CommonAPI::ClientId> _client, bool _includePackages, bool _includeModuleFirmware, getInstalledSoftwareReply_t _reply);



protected:
    class RemoteEventHandler: public virtual SoftwareLoadingManagerStubRemoteEvent {
    public:
        RemoteEventHandler(SoftwareLoadingManagerStubDefault *_defaultStub);


    private:
        SoftwareLoadingManagerStubDefault *defaultStub_;
    };
private:
    SoftwareLoadingManagerStubDefault::RemoteEventHandler remoteEventHandler_;


    CommonAPI::Version interfaceVersion_;
};

} // namespace genivi
} // namespace org
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_Software_Loading_Manager_STUB_DEFAULT
