/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.5.v201601121427.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#ifndef V1_ORG_GENIVI_Sota_Client_PROXY_HPP_
#define V1_ORG_GENIVI_Sota_Client_PROXY_HPP_

#include <v1/org/genivi/SotaClientProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace org {
namespace genivi {

template <typename ... _AttributeExtensions>
class SotaClientProxy
    : virtual public SotaClient, 
      virtual public SotaClientProxyBase,
      virtual public _AttributeExtensions... {
public:
    SotaClientProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SotaClientProxy();

    typedef SotaClient InterfaceType;



    /**
     * Returns the wrapper class that provides access to the broadcast UpdateAvailable.
     */
    virtual UpdateAvailableEvent& getUpdateAvailableEvent() {
        return delegate_->getUpdateAvailableEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast DownloadComplete.
     */
    virtual DownloadCompleteEvent& getDownloadCompleteEvent() {
        return delegate_->getDownloadCompleteEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast InstalledSoftwareNeeded.
     */
    virtual InstalledSoftwareNeededEvent& getInstalledSoftwareNeededEvent() {
        return delegate_->getInstalledSoftwareNeededEvent();
    }

    /**
     * description: Sent by SC to start the download of an update previously announced
    	as
     *   available through an update_available() call  made from SC to
    	SWLM.
     * Calls initiateDownload with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void initiateDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls initiateDownload with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> initiateDownloadAsync(const std::string &_updateId, InitiateDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Abort a download previously initiated with initiate_download().
    	Invoked by
     *   SWLM in response to an error or an explicit
    	request sent by HMI to SWLM in
     *   response to a user abort.
     * Calls abortDownload with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls abortDownload with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: Receive an update report from SWLM with the processing result of all
    	bundled
     *   operations.
    	An update report message can either be sent in response
    	to an
     *   downloadComplete() message transmitted from SC to SWLM,
    	or be sent
     *   unsolicited by SWLM to SC
     * Calls updateReport with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void updateReport(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls updateReport with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> updateReportAsync(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, UpdateReportAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<SotaClientProxyBase> delegate_;
};

typedef SotaClientProxy<> SotaClientProxyDefault;


//
// SotaClientProxy Implementation
//
template <typename ... _AttributeExtensions>
SotaClientProxy<_AttributeExtensions...>::SotaClientProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast<SotaClientProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast<SotaClientProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SotaClientProxy<_AttributeExtensions...>::~SotaClientProxy() {
}

/**
 * description: Sent by SC to start the download of an update previously announced
	as
 *   available through an update_available() call  made from SC to
	SWLM.
 */
template <typename ... _AttributeExtensions>
void SotaClientProxy<_AttributeExtensions...>::initiateDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->initiateDownload(_updateId, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SotaClientProxy<_AttributeExtensions...>::initiateDownloadAsync(const std::string &_updateId, InitiateDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->initiateDownloadAsync(_updateId, _callback, _info);
}
/**
 * description: Abort a download previously initiated with initiate_download().
	Invoked by
 *   SWLM in response to an error or an explicit
	request sent by HMI to SWLM in
 *   response to a user abort.
 */
template <typename ... _AttributeExtensions>
void SotaClientProxy<_AttributeExtensions...>::abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->abortDownload(_updateId, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SotaClientProxy<_AttributeExtensions...>::abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->abortDownloadAsync(_updateId, _callback, _info);
}
/**
 * description: Receive an update report from SWLM with the processing result of all
	bundled
 *   operations.
	An update report message can either be sent in response
	to an
 *   downloadComplete() message transmitted from SC to SWLM,
	or be sent
 *   unsolicited by SWLM to SC
 */
template <typename ... _AttributeExtensions>
void SotaClientProxy<_AttributeExtensions...>::updateReport(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->updateReport(_updateId, _operationsResults, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SotaClientProxy<_AttributeExtensions...>::updateReportAsync(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, UpdateReportAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->updateReportAsync(_updateId, _operationsResults, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SotaClientProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SotaClientProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SotaClientProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SotaClientProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SotaClientProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace genivi
} // namespace org
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_ORG_GENIVI_Sota_Client_PROXY_HPP_
