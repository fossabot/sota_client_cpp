/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.5.v201601121430.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/**
 * description: Software Over The Air Client API
 */
#ifndef V1_ORG_GENIVI_SWM_Sota_Client_DBUS_PROXY_HPP_
#define V1_ORG_GENIVI_SWM_Sota_Client_DBUS_PROXY_HPP_

#include <v1/org/genivi/swm/SotaClientProxyBase.hpp>
#include "v1/org/genivi/swm/SotaClientDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace v1 {
namespace org {
namespace genivi {
namespace swm {

class SotaClientDBusProxy
    : virtual public SotaClientProxyBase, 
      virtual public CommonAPI::DBus::DBusProxy {
public:
    SotaClientDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~SotaClientDBusProxy() { }


    virtual InstalledSoftwareNeededEvent& getInstalledSoftwareNeededEvent();
    virtual UpdateAvailableEvent& getUpdateAvailableEvent();
    virtual DownloadCompleteEvent& getDownloadCompleteEvent();

    /**
     * description: Sent by SC to start the download of an update previously announced
    	as
     *   available through an update_available() call made from SC to
    	SWLM.
     */
    virtual void initiateDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> initiateDownloadAsync(const std::string &_updateId, InitiateDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Abort a download previously initiated with initiate_download().
    	Invoked by
     *   SWLM in response to an error or an explicit
    	request sent by HMI to SWLM in
     *   response to a user abort.
     */
    virtual void abortDownload(const std::string &_updateId, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> abortDownloadAsync(const std::string &_updateId, AbortDownloadAsyncCallback _callback, const CommonAPI::CallInfo *_info);
    /**
     * description: Receive an update report from SWLM with the processing result of all
    	bundled
     *   operations.
    	An update report message can either be sent in response
    	to an
     *   downloadComplete() message transmitted from SC to SWLM,
    	or be sent
     *   unsolicited by SWLM to SC
     */
    virtual void updateReport(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> updateReportAsync(const std::string &_updateId, const std::vector<SotaClient::OperationResult> &_operationsResults, UpdateReportAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:
   

    CommonAPI::DBus::DBusEvent<InstalledSoftwareNeededEvent> installedSoftwareNeeded_;
    CommonAPI::DBus::DBusEvent<UpdateAvailableEvent, CommonAPI::Deployable<::v1::org::genivi::swm::SotaClient::UpdateAvailable, SotaClient_::UpdateAvailableDeployment_t>> updateAvailable_;
    CommonAPI::DBus::DBusEvent<DownloadCompleteEvent, CommonAPI::Deployable<::v1::org::genivi::swm::SotaClient::DownloadComplete, SotaClient_::DownloadCompleteDeployment_t>> downloadComplete_;

};

} // namespace swm
} // namespace genivi
} // namespace org
} // namespace v1

#endif // V1_ORG_GENIVI_SWM_Sota_Client_DBUS_PROXY_HPP_

