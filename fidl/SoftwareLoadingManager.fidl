// (c) 2015,2016 - Jaguar Land Rover.
//
// Mozilla Public License 2.0
//
// GENIVI Software Management IDL
//

// Abbreviations:
// SC - SOTA CLient
// SWLM - Software Loading Manager
// ML - Module Loader (one instance per external module)
// PackMgr - Package Manager
// PartMgr - Partition Manager
// HMI - Human Machine Interface (IVI screen)
// CEDM - Consumer Electronics Device Manager
// LocMedMgr - Local Media Manager


package org.genivi


<** @description: Software Loading Manager interfaace
**>
interface SoftwareLoadingManager {
	version { major 1 minor 0 }
	

<** @description: Error codes returned as a result of an operation. **>
	enumeration SWMResult {
		<** @description: Operation executed successfully **>
		SWM_RES_OK = 0
	
		<** @description: Operation has already been processed **>
		SWM_RES_ALREADY_PROCESSED = 1
	
		<** @description: Dependency failure during package install, upgrade, or removal **>
		SWM_RES_DEPENDENCY_FAILURE = 2
	
		<** @description: Update image integrity has been compromised **>
		SWM_RES_VALIDATION_FAILED = 3
	
		<** @description: Package installation failed **>
		SWM_RES_INSTALL_FAILED = 4
	
		<** @description: Package upgrade failed **>
		SWM_RES_UPGRADE_FAILED = 5
	
		<** @description: Package removal failed **>
		SWM_RES_REMOVAL_FAILED = 6
	
		<** @description: The module loader could not flash its managed module **>
		SWM_RES_FLASH_FAILED = 7
	
		<** @description: Partition creation failed **>
		SWM_RES_CREATE_PARTITION_FAILED = 8
	
		<** @description: Partition deletion failed **>
		SWM_RES_DELETE_PARTITION_FAILED = 9
	
		<** @description: Partition resize failed **>
		SWM_RES_RESIZE_PARTITION_FAILED = 10
	
		<** @description: Partition write failed **>
		SWM_RES_WRITE_PARTITION_FAILED = 11
	
		<** @description: Partition patching failed **>
		SWM_RES_PATCH_PARTITION_FAILED = 12
	
		<** @description: User declined the update **>
		SWM_RES_USER_DECLINED = 13
		
		<** @description: Software was blacklisted **>
		SWM_RES_SOFTWARE_BLACKLISTED = 14
	
		<** @description: Ran out of disk space **>
		SWM_RES_DISK_FULL = 15
	
		<** @description: Software package not found **>
		SWM_RES_NOT_FOUND = 16
	
		<** @description: Tried to downgrade to older version **>
		SWM_RES_OLD_VERSION = 17
	
		<** @description: SWM Internal integrity error **>
		SWM_RES_INTERNAL_ERROR = 18
	
		<** @description: Other error **>
		SWM_RES_GENERAL_ERROR = 19
	}
	
<** @description:
Describes a single element of an installed package.
**>
struct InstalledPackage {
	<** @description: 
	The ID string of the installed package.
	**>
	String packageId

	<** @description: 
	A symbolic name of the installed package
	**>
	String name

	<** @description: 
	A descriptive text of the installed package
	**>
	String description

	<** @description: 
	The unix time stamp of when the package was installed
	or last updated.
	**>
	UInt64 lastModified
}

<** @description:
Describes a single element of an installed firmware image.
**>
struct InstalledFirmware {
	<** @description: 
	The name of the module that has firmware installed
	**>
	String module

	<** @description:
	The version id string for the currently installed 
	firmware.
	**>
	String firmwareId

	<** @description: 
	The unix time stamp of when the module was flashed
	with the given firmware version
	**>
	UInt64 lastModified
}



	<** 
	@description: 
	Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
    package is available for download.
	This is a fire and forget message. If the update is to be downloaded,
	org.genivi.swm.sc.initiate_download() will be called. 
	**>
	method updateAvailable {
		in {
			<** @description:
			Package ID of update. Not currently used.
			**>
			String updateId

			<** @description: 
			A descriptive text of the available update.
			**>
			String description

			<** @description:
			Signature generated of the digest of updateId, for example:
			echo $UPDATE_ID | openssl dgst -sha256 -sign private_key | base64 
			**>
			String signature

			<** @description:
			Flag to indicate if a user confirmation of the package is
            required.
			**>
			Boolean requestConfirmation

			<** @description: 
			The size of the available update, in bytes.
			**>
			UInt64 size

			<** @description: 
			A symbolic name of the available update.
			**>
			String name
		}
	}

	<** 
	@description: 
	Message, sent by SC to SWLM, to indicate
	that a download previously initiated by a
	**>
	method downloadComplete {
		in {
			<** @description:
			Path on the local file system to the squashfs image
			containing the update
			**>
			String updateImage


			<** @description:
            Signature generated of the digest of the image pointed to
            by updateImage, for example: 
			openssl dgst -sha256 -sign priv_key.pem $updateImage | base64 
			**>
			String signature
		}
	}

	<** 
	@description: 
	Message, sent by HMI to SWLM to specify
	if a user confirmed or declined an update notified to HMI through a
	org.genivi.swm.hmi.updateNotificataion() call.
	**>
	method updateConfirmation {
		in {
			<** @description: 
			Update_id originally provided by SWLM when it
			invoked updateAvailable() on HMI
			**>
			UInt32 updateId

			<** @description: 
			Approved or declined
			**>
			Boolean approved
		}
	}

	<** 
	@description: 
	Abort a download in progress.
	Invoked by HMI in response to SWLM in response to a user abort.
	Will be forwarded by SWLM to SC in order to complete the abort.
	**>
	method abortDownload {
		in {
			<** @description:
			Package ID of update to abort..
			The value was previously provided to an updateNotification()
            call made from SWLM to HMI.
			**>
			String updateId
		}
	}

	<** 
	@description:
	Message, sent by other components to SWLM to report the result
	of an update operation initiated by a previous
	call to one of the following methods:
	org.genivi.swm.packmgr.installPackage()
	org.genivi.swm.packmgr.upgradePackage()
	org.genivi.swm.packmgr.removePackage()
	org.genivi.swm.partmgr.createDiskPartition()
	org.genivi.swm.packmgr.deleteDiskPartition()
	org.genivi.swm.packmgr.resizeDiskPartition()
	org.genivi.swm.packmgr.writeDiskPartition()
	org.genivi.swm.packmgr.patchDiskPartition()
	org.genivi.swm.ml.flashModuleFirmware()
	**>
	method operationResult {
		in {
			<** @description: 
			Original transaction ID provided as an argument to 
			the update operation call that generated this result.
			**>
			UInt32 transactionId
			<** @description: 
			The enumerated result code of the operation
			**>
			SWMResult resultCode
			<** @description: 
			A descriptive text of the operation result
			**>
			String resultText
		}
	}

	<** @description:
	Message, sent by CEDM or SC to SWLM to retrieve a
	list of installed software packages and/or module
	firmware versions.
	**>
	method getInstalledSoftware {
		in {
			<** @description: 
			Retrieve installed package versions from PackMgr
			**>
			Boolean includePackages

			<** @description: 
			Retrieve firmware versions from all ML
			**>
			Boolean includeModuleFirmware
		}
		out {
			<** @description: 
			All installed packages. 
			Empty if includePackages is false
			**>
			InstalledPackage[] installedPackages
			<** @description: 
			All installed module firmwares.
			Empty if include_module_firmware is false
			**>
			InstalledFirmware[] installedFirmware
		}
	}
}
